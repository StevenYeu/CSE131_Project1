
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
// CSE 131 Reduced-C Compiler Project
// Copyright (C) 2008-2015 Garo Bournoutian and Rick Ord
// University of California, San Diego
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

terminal
    T_AMPERSAND,
    T_AND,
    T_ARROW,
    T_ASSIGN,
    T_AUTO,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DELETE,	//Phase 0 added
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NEW,	//Phase 0 added	
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_THIS,
    T_TILDE,
    T_TRUE,
    T_WHILE,
    T_VOID
    ;

terminal String
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDef,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    OptStatic,
    StructdefDecl,
    CtorDef,
    DtorDef,
    OptRef,
    // moved FieldVarsList,
    FieldVarDecl,
    OptCtorDtorList,
    CtorDtorList,
    CtorDtorDecl,
    OptFieldFuncsList,
    FieldFuncsList,
    FieldFuncDecl,
    // moved OptStmtList,
    // moved StmtList,
    Stmt,
    CodeBlock,
    // moved optExprList
    IfStmt,
    OptElse,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt,
    WritePairList,
    WritePair,
    ConstExpr,
    // moved ExprList
    UnarySign,
    Equality,
    Relation,
    OptInit,
    OptCtorCall,
    CtorCall,
    // moved OptPointerList, 
    // moved PointerList,
    Pointer,
    // moved OptArrayList,
    // moved ArrayList,
    Array,
    NewStmt,
    DeleteStmt
    ;

non terminal String    
    AddOp,
    MulOp,
    IncDecOp,
    ParamDecl
    ;

non terminal STO
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Designator,
    Designator2,
    Designator3
    ;

non terminal Type
    BasicType,
    DecoratedBasicType,
    StructType,
    Type,
    DecoratedType,
    ReturnType
    ;

non terminal Vector
    OptParamList,
    ParamList,
    OptExprList,
    ExprList,
    ArrayList,
    OptArrayList,
    FieldVarsList,
    OptPointerList,
    PointerList,
    OptStmtList,
    StmtList
    ;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=         {:
                        ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                        ((MyParser) parser).DoProgramEnd();
                    :}
    ;


OptGlobalDecls ::=  GlobalDecls
    |               /* empty */
    ;


GlobalDecls ::=     GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=      ExternDecl
    |               VarDecl
    |               ConstDecl
    |               StructdefDecl
    |               FuncDecl
    |               FuncDef
    ;


ExternDecl ::=      T_EXTERN DecoratedBasicType:_2 T_ID:_3 OptArrayList:_4
                    {:
                        ((MyParser) parser).DoExternDecl (_3,_2); // Changed
                    :}
                    T_SEMI
    ;


VarDecl ::=         OptStatic:_1 DecoratedType:_2 T_ID:_3 OptArrayList:_4 OptInit:_5
                    {:
                        ((MyParser) parser).DoVarDecl2 (_3,_2,_4,((STO)_5)); //changed
                    :}
                    T_SEMI
    |               OptStatic:_1 T_AUTO T_ID:_3 T_ASSIGN Expr:_5 
                    {:
                        ((MyParser) parser).DoVarDecl (_3, _5.getType()); // changed again
                    :}
                    T_SEMI
    |               OptStatic:_1 StructType:_2 T_ID:_3 OptArrayList:_4 OptCtorCall:_5
                    {:
                        ((MyParser) parser).DoCtorStructs(_3,_2,((Vector<STO>)_5)); // changed
                    :}
                    T_SEMI
    ;


ConstDecl ::=       OptStatic:_1 T_CONST BasicType:_2 T_ID:_3 T_ASSIGN ConstExpr:_5
                    {:
                        ((MyParser) parser).DoConstDecl2 (_3,_2,(STO)_5); // changed
                    :}
                    T_SEMI
    |               OptStatic:_1 T_CONST T_AUTO T_ID:_3 T_ASSIGN ConstExpr:_5
                    {:

                        ((MyParser) parser).DoAutoDecl (_3,(STO)_5); // changed, might need add OptStatic for future use
                    :}
                    T_SEMI
    ;


OptStatic ::=       T_STATIC
    |               /* empty */
    ;


StructdefDecl ::=   T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).IsInStruct();
                        ((MyParser) parser).DoStructName(_1);
                    :}
                    FieldVarsList
                    OptCtorDtorList
                    {:
                        // Put logic here to create default ctor if needed
                        ((MyParser) parser).DoDefaultConstructor();

                    :}
                    OptFieldFuncsList
                    {:
                        ((MyParser) parser).IsInStruct();
                        ((MyParser) parser).getStructScope();
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).DoStructdefDecl (_1);
                    :}
                    T_RBRACE T_SEMI
    ;


FieldVarsList ::=   FieldVarDecl
    |               FieldVarsList FieldVarDecl
    ;


FieldVarDecl ::=    DecoratedType:_1 T_ID:_2 OptArrayList:_3 T_SEMI
                    {:
                        ((MyParser) parser).DoStructVarDecl(_1,_2,_3);
                    :}
    ;


OptCtorDtorList ::= CtorDtorList
    |               /* empty */
    ;


CtorDtorList ::=    CtorDtorDecl
    |               CtorDtorList CtorDtorDecl
    ;


CtorDtorDecl ::=    CtorDef
    |               DtorDef
    ;


CtorDef ::=         T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoStructorDecl(_3);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                    :}
                    T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


DtorDef ::=         T_TILDE T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoStructorDecl("~" + _3);
                    :}
                    T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


OptFieldFuncsList ::= FieldFuncsList
    |               /* empty */
    ;


FieldFuncsList ::=  FieldFuncDecl
    |               FieldFuncsList FieldFuncDecl
    ;


FieldFuncDecl ::=   FuncDef
    ;


FuncDef ::=         T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_3(_3,_1,_2);
                        
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                    
                    :}
                    T_LBRACE OptStmtList:_5
                    {:
                        
                        RESULT =((MyParser) parser).MissingReturnStmt(_1, _5);

                        ((MyParser) parser).DoFuncDecl_2();
                    :}
                    T_RBRACE
    ;


FuncDecl ::=        T_EXTERN T_FUNCTION T_COLON ReturnType:_1 T_ID:_3
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_3);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
                    T_SEMI
    ;


Type ::=            DecoratedType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1
                    {:
                        RESULT = _1;
                    :}
    ;


DecoratedType ::=   DecoratedBasicType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1 PointerList:_2
                    {:
                        RESULT = ((MyParser) parser).DoPointer(_1,_2);    // gotta do something here!
                    :}
    ;


DecoratedBasicType ::= BasicType:_1 OptPointerList:_2
                    {:
                        RESULT = ((MyParser) parser).DoPointer(_1,_2);    // gotta do something here!
                    :}
    ;


BasicType ::=       T_INT:_1
                    {:
                        RESULT = new IntType("int");  // gotta do something here! Done 
                    :}
    |               T_FLOAT:_1
                    {:
                        RESULT = new FloatType("float");  // gotta do something here! Done
                    :}
    |               T_BOOL:_1
                    {:
                        RESULT = new BoolType("bool");  // gotta do something here! Done
                    :}
    ;


StructType ::=      T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    :}
    ;


ReturnType ::=      Type:_1
                    {:
                        RESULT = _1;
                    :}
    |               T_VOID
                    {:
                        RESULT = new VoidType("void",0);
                    :}
    ;


OptPointerList ::=  PointerList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;

PointerList ::=     Pointer:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               PointerList:_1 Pointer:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement(_2);
                    :}
    ;


Pointer ::=         T_STAR
                    {:
                        RESULT = "*";
                    :}
    ;


OptArrayList ::=    ArrayList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;

ArrayList ::=       Array:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               ArrayList:_1 Array:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement(_2);
                    :}
    ;

Array ::=           T_LBRACKET ConstExpr:_1 T_RBRACKET
                    {:
                        RESULT =_1;
                    :}
    ;


CodeBlock ::=       T_LBRACE
                    {: ((MyParser) parser).DoBlockOpen(); :}
                    OptStmtList
                    {: 

                      //  ((MyParser) parser).DoExitLoop();
                        ((MyParser) parser).DoBlockClose();
                    :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList:_1
                    {:
                        RESULT = _1;
                    :}

    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


StmtList ::=        Stmt:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               StmtList:_1 Stmt:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement(_2);
                    :}
    ;


Stmt ::=            VarDecl
    |               ConstDecl
    |               CodeBlock
    |               Expr T_SEMI
    |               IfStmt
    |               WhileStmt
    |               ForeachStmt
    |               BreakStmt
    |               ContinueStmt
    |               ExitStmt
    |               ReturnStmt:_1
                    {:
                        RESULT = _1;
                    :}
    |               ReadStmt
    |               WriteStmt
    |               NewStmt
    |		    DeleteStmt
    ;


OptParamList ::=    ParamList:_1
                    {:
                        RESULT = _1;

                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


ParamList ::=       ParamDecl:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);

                    :}
    |               ParamList:_1 T_COMMA ParamDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


ParamDecl ::=       Type:_1 OptRef:_2 T_ID:_3 OptArrayList:_4
                    {: 
                        RESULT = new String(_1.getName()  +_2 +" "+ _3 + " " + ((MyParser) parser).processArray(_4));
                    :}
    ;


OptRef ::=          T_AMPERSAND:_1
                    {:
                        RESULT = "&";
                    :}
    |               /* empty */
                    {:
                        RESULT = "";
                    :}
    ;


OptInit ::=         T_ASSIGN Expr:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;


OptCtorCall ::=     CtorCall:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


CtorCall ::=        T_COLON T_LPAREN OptExprList:_1 T_RPAREN
                    {:
                        RESULT = _1;
                    :}
    ;


IfStmt ::=          T_IF Expr:_1 
                    {:
                        RESULT =((MyParser) parser).DoIfAndWhile(_1);
                    :}
                    CodeBlock OptElse

    ;


OptElse ::=         T_ELSE CodeBlock
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE Expr:_1                   
                    {:
                        RESULT =((MyParser) parser).DoIfAndWhile(_1);

                        ((MyParser) parser).DoInLoop();
                    :}
                    CodeBlock
                    {:
                        ((MyParser) parser).DoExitLoop();
                    :}

    ;


ForeachStmt ::=     T_FOREACH T_LPAREN Type:_1 OptRef:_2 T_ID:_3 T_COLON Expr:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoInLoop();
                        ((MyParser) parser).DoForEachDecl (_1,_2,_3,_4); //changed Done
                    :}
                    CodeBlock
                    {:

                        ((MyParser) parser).DoExitLoop();
                        ((MyParser) parser).DoBlockClose();
                    :}
    ;


BreakStmt ::=       T_BREAK T_SEMI
                    {:
                        ((MyParser) parser).DoBreak();
                    :}
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
                    {:
                        ((MyParser) parser).DoContinue();
                    :}
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 T_RPAREN T_SEMI
                    {:
                        ((MyParser) parser).DoExit(_1);
                    :}
    ;


ReturnStmt ::=      T_RETURN T_SEMI 
                    {:
                       RESULT = ((MyParser)parser).DoReturnStmt();
                    :}
    |               T_RETURN:_1 Expr:_2 T_SEMI
                    {:
                        //RESULT = "return"; // changed
                       RESULT = ((MyParser)parser).DoReturnStmt(_2);
                    :}

    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator T_SEMI
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList T_SEMI
    ;


WritePairList ::=   WritePair
    |               WritePairList T_OSTREAM WritePair
    ;


WritePair ::=       Expr
    |               T_ENDL
    ;


ConstExpr ::=       Expr:_1
                    {:
                        RESULT = _1;
                    :}
    ;


OptExprList ::=     ExprList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


ExprList ::=        Expr:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               ExprList:_1 T_COMMA Expr:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement(_2);

                    :}
    ;


Expr ::=            Designator:_1 T_ASSIGN Expr:_2
                    {:
                        
                        RESULT = ((MyParser) parser).DoAssignTypeCheck(_1,_2);
                        //RESULT = ((MyParser) parser).DoAssignExpr (RESULT);
                       
                    :}
    |               Expr0:_1
                    {:
                        RESULT = _1;
                    :}
    ;



Expr0 ::=           Expr0:_1 T_OR Expr1:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOp(_1,_2),_2); 
                    :}
    |               Expr1:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr1 ::=           Expr1:_1 T_AND Expr2:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOp(_1,_2),_2); 
                    :}
    |               Expr2:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr2 ::=           Expr2:_1 T_BAR Expr3:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1,new BarOp(_1,_2),_2);
                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=           Expr3:_1 T_CARET Expr4:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1,new CaretOp(_1,_2),_2);
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=           Expr4:_1 T_AMPERSAND Expr5:_2
                    {:
                         RESULT = ((MyParser) parser).DoBinaryExpr (_1,new AmpersandOp(_1,_2),_2);
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_2 Expr6:_3
                    {:
                        if(_2.equals("==")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new EqualOp(_1,_3,(String)_2),_3);    
                        }
                        else if(_2.equals("!=")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new NotEqualOp(_1,_3,(String)_2),_3);    
                        }

                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_2 Expr7:_3 // changed
                    {:
                        if(_2.equals("<")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new LTOp(_1,_3,(String)_2),_3);    
                        }
                        else if(_2.equals("<=")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new LTEOp(_1,_3,(String)_2),_3);    
                        }
                        else if(_2.equals(">")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new GTOp(_1,_3,(String)_2),_3);    
                        }
                        if(_2.equals(">=")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new GTEOp(_1,_3,(String)_2),_3);    
                        }

                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        if(_2.equals("+")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new AddOp(_1,_3, _2),_3);    
                        }
                        else {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new MinusOp(_1,_3, _2),_3);   
                        }
                        

                    :}
    |               Expr8:_1
                   {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=           Expr8:_1 MulOp:_2 Designator:_3
                    {:
                        if(_2.equals("*")){
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new MulOp(_1,_3, _2),_3);
                        }
                        else if(_2.equals("/")){
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new DivOp(_1,_3, _2),_3);
                        }
                        else{
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new ModOp(_1,_3, _2),_3);
                        }
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;





Equality ::=        T_EQU
                    {:
                        RESULT = "==";
                    :}
    |               T_NEQ
                    {:
                        RESULT = "!=";
                    :}
    ;


Relation ::=        T_LT
                    {:
                        RESULT = "<";
                    :}
    |               T_GT
                    {:
                        RESULT = ">";
                    :}
    |               T_LTE
                    {:
                        RESULT = "<=";
                    :}
    |               T_GTE
                    {:
                        RESULT = ">=";
                    :}
    ;


AddOp ::=           T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;


MulOp ::=           T_STAR
                    {:
                        RESULT = "*";
                    :}
    |               T_SLASH
                    {:
                        RESULT = "/";
                    :}
    |               T_MOD
                    {:
                        RESULT = "%";
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = "++";
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = "--";
                    :}
    ;




Designator ::=      T_STAR Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoNullPointerCheck(_1);
                        RESULT = ((MyParser) parser).DoPointerCheck(RESULT);
                        RESULT = ((MyParser) parser).DoDereference(RESULT); 
                    :}
    |               T_AMPERSAND Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoAddressOf(_1);
                    :}
    |               UnarySign:_1 Designator:_2
                    {:

                        RESULT = ((MyParser) parser).DoUnarySign((String)_1,_2);
                    :}
    |               T_NOT Designator:_1
                    {:
                         RESULT = ((MyParser) parser).DoUnaryExpr(_1, new NotOp(_1));
                    :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeOf(_2);
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 OptArrayList:_3 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeOf(_2, _3);
                    :}
    |               T_LPAREN DecoratedType:_1 T_RPAREN Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoTypeCast(_1,_2);
                        //RESULT = _2;
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoIncDecCheck(_1,_2);
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        ((MyParser) parser).getName(_3);
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr:_2 T_RBRACKET
                    {:
                        
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1,_2);
                    :}
    |               Designator2:_1 T_ARROW T_ID:_2
                    {:
                        RESULT = ((MyParser) parser).DoNullPointerCheck(_1);
                        RESULT = ((MyParser) parser).DoPointerArrowCheck(RESULT, _2); 
                    
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                        RESULT = ((MyParser) parser).DoIncDecCheck(_2,_1);

                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_2 T_RPAREN
                    {:
                        
                        RESULT = ((MyParser) parser).DoFuncCall (_1,_2);
                       // RESULT = _1;
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {: 
                        RESULT = new ConstSTO (_1, new IntType("int"), Integer.parseInt(_1));    // fix me! Done
                        RESULT.setIsAddressable(false);
                        RESULT.setIsModifiable(false);
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1, new FloatType("float"), Float.parseFloat(_1));  // fix me! Done 
                        RESULT.setIsAddressable(false);
                        RESULT.setIsModifiable(false);
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1);
                    :}
    |               T_TRUE
                    {:
                        RESULT = new ConstSTO ("true", new BoolType("bool"), 1);    // fix me! Done
                    :}
    |               T_FALSE
                    {:
                        RESULT = new ConstSTO ("false", new BoolType("bool"), 0);   // fix me! Done
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ExprSTO ("nullptr", new NullPointerType("nullptr"));     // fix me!
                        RESULT.setIsModifiable(false);
                        RESULT.setIsAddressable(false); 
                    :}
    |               T_THIS
                    {:
                        RESULT = new ExprSTO ("this",new StructType(((MyParser) parser).getStructName()));
                        RESULT.setIsModifiable(false);
                        RESULT.setIsAddressable(false); // fix me!
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDes3_GlobalID (_1);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    :}
    ;

// Phase 0 change
NewStmt ::=	        T_NEW Designator:_1 OptCtorCall:_2 T_SEMI
                    {:
                        RESULT = ((MyParser) parser).DoNew(_1,((Vector<STO>)_2));
                    :}
    ;

DeleteStmt ::=      T_DELETE Designator:_1 T_SEMI
                    {:
                        RESULT = ((MyParser) parser).DoDelete(_1);
                    :}
            
    ;

UnarySign ::=       T_MINUS
                {:
                    RESULT = "-";
                :}
    |		    T_PLUS
                {:
                    RESULT = "+";
                :}
    ;
